{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CustomerService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.apiURL = \"http://localhost:54833/api/customer\";\n    this.commonapiURL = \"http://localhost:54833/api/common\";\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',\n        'Access-Control-Allow-Methods': 'OPTIONS, POST, GET'\n      })\n    };\n  }\n  /**\r\n  * Write code on Method\r\n  *\r\n  * @return response()\r\n  */\n  getAll() {\n    return this.httpClient.get(this.apiURL + '/getallcustomers').pipe(catchError(this.errorHandler));\n  }\n  /**\r\n     * Write code on Method\r\n     *\r\n     * @return response()\r\n     */\n  find(id) {\n    return this.httpClient.get(this.apiURL + '/getcustomerbyId/' + id).pipe(catchError(this.errorHandler));\n  }\n  delete(id) {\n    return this.httpClient.delete(this.apiURL + '/deletecustomerbyId/' + id, this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  create(post) {\n    errorHandler();\n    return this.httpClient.post(this.apiURL + '/addcustomer', JSON.stringify(post), this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  update(post) {\n    return this.httpClient.put(this.apiURL + '/updatecustomer', JSON.stringify(post), this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  ///\n  getAllAssets() {\n    return this.httpClient.get(this.commonapiURL + '/assets').pipe(catchError(this.errorHandler));\n  }\n  getAllCountries() {\n    return this.httpClient.get(this.commonapiURL + '/country').pipe(catchError(this.errorHandler));\n  }\n  filtersRegions(CountryId) {\n    return this.httpClient.get(this.commonapiURL + '/region?CountryId=' + CountryId).pipe(catchError(this.errorHandler));\n  }\n  filtersCities(CountryId, RegionId) {\n    return this.httpClient.get(this.commonapiURL + '/city?CountryId=' + CountryId + '&RegionId=' + RegionId).pipe(catchError(this.errorHandler));\n  }\n  filtersLocations(CountryId, RegionId, CityId) {\n    return this.httpClient.get(this.commonapiURL + '/location?CountryId=' + CountryId + '&RegionId=' + RegionId + '&CityId=' + CityId).pipe(catchError(this.errorHandler));\n  }\n  getAllRegions() {\n    return this.httpClient.get(this.commonapiURL + '/getallregions').pipe(catchError(this.errorHandler));\n  }\n  getAllCities() {\n    return this.httpClient.get(this.commonapiURL + '/getallcities').pipe(catchError(this.errorHandler));\n  }\n  getAllLocations() {\n    return this.httpClient.get(this.commonapiURL + '/getalllocations').pipe(catchError(this.errorHandler));\n  }\n  ///\n  errorHandler(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log('Exception raised: ' + errorMessage);\n    return throwError(errorMessage);\n  }\n}\nCustomerService.ɵfac = function CustomerService_Factory(t) {\n  return new (t || CustomerService)(i0.ɵɵinject(i1.HttpClient));\n};\nCustomerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CustomerService,\n  factory: CustomerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","throwError","catchError","CustomerService","constructor","httpClient","headers","getAll","get","apiURL","pipe","errorHandler","find","id","delete","httpOptions","create","post","JSON","stringify","update","put","getAllAssets","commonapiURL","getAllCountries","filtersRegions","CountryId","filtersCities","RegionId","filtersLocations","CityId","getAllRegions","getAllCities","getAllLocations","error","errorMessage","ErrorEvent","message","status","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Projects\\CustomerAssetsPortal\\CustomerAssetsWebPortal\\customerportal\\src\\app\\customer\\customer.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n    \nimport {  Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n   \nimport { Asset, City, Country, Customer, Region } from './customer';\n    \n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n  [x: string]: any;\n  private apiURL = \"http://localhost:54833/api/customer\";  \n  private commonapiURL = \"http://localhost:54833/api/common\"; \n       \n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',\n      'Access-Control-Allow-Methods' :'OPTIONS, POST, GET'\n    })\n  }\n   \n  constructor(private httpClient: HttpClient) { }\n      /**\n   * Write code on Method\n   *\n   * @return response()\n   */\n      getAll(): Observable<Customer[]> {\n        return this.httpClient.get<Customer[]>(this.apiURL + '/getallcustomers')\n        .pipe(\n          catchError(this.errorHandler)\n        )\n      } \n/**\n   * Write code on Method\n   *\n   * @return response()\n   */\nfind(id:number): Observable<any> {     \n  return this.httpClient.get(this.apiURL + '/getcustomerbyId/' + id)  \n  .pipe(\n    catchError(this.errorHandler)\n  )\n}\n\ndelete(id:number){  \n  return this.httpClient.delete(this.apiURL + '/deletecustomerbyId/' + id, this.httpOptions)  \n  .pipe(\n    catchError(this.errorHandler)\n  )\n}\n\ncreate(post:Customer): Observable<Customer> { \n\n  errorHandler()\n  return this.httpClient.post<Customer>(this.apiURL + '/addcustomer', JSON.stringify(post), this.httpOptions)\n  .pipe(\n   \n    catchError(this.errorHandler)\n  )\n}  \n\nupdate(post:Customer): Observable<Customer> {    \n  return this.httpClient.put<Customer>(this.apiURL + '/updatecustomer', JSON.stringify(post), this.httpOptions)\n  .pipe(\n    catchError(this.errorHandler)\n  )\n}  \n\n///\n\ngetAllAssets(): Observable<Asset[]> {\n  return this.httpClient.get<Asset[]>(this.commonapiURL + '/assets')\n  .pipe(\n    catchError(this.errorHandler)\n  )\n} \ngetAllCountries(): Observable<Country[]> {\n  return this.httpClient.get<Country[]>(this.commonapiURL + '/country')\n  .pipe(\n    catchError(this.errorHandler)\n  )\n} \n\nfiltersRegions(CountryId: Number): Observable<Region[]> {\n  return this.httpClient.get<Region[]>(this.commonapiURL + '/region?CountryId='+CountryId)\n  .pipe(\n    catchError(this.errorHandler)\n  )\n} \n\nfiltersCities(CountryId: Number,RegionId: Number): Observable<City[]> {\n  return this.httpClient.get<City[]>(this.commonapiURL + '/city?CountryId='+CountryId+'&RegionId='+RegionId)\n  .pipe(\n    catchError(this.errorHandler)\n  )\n} \nfiltersLocations(CountryId: Number,RegionId: Number,CityId: Number): Observable<Location[]> {\n  return this.httpClient.get<Location[]>(this.commonapiURL + '/location?CountryId='+CountryId+'&RegionId='+RegionId+'&CityId='+CityId)\n  .pipe(\n    catchError(this.errorHandler)\n  )\n} \n\ngetAllRegions(): Observable<Region[]> {\n  return this.httpClient.get<Region[]>(this.commonapiURL + '/getallregions')\n  .pipe(\n    catchError(this.errorHandler)\n  )\n} \n\ngetAllCities(): Observable<City[]> {\n  return this.httpClient.get<City[]>(this.commonapiURL + '/getallcities')\n  .pipe(\n    catchError(this.errorHandler)\n  )\n} \ngetAllLocations(): Observable<Location[]> {\n  return this.httpClient.get<Location[]>(this.commonapiURL + '/getalllocations')\n  .pipe(\n    catchError(this.errorHandler)\n  )\n} \n///\n\n  errorHandler(error: any) {\n    let errorMessage = '';\n    if(error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log('Exception raised: '+errorMessage);\n    return throwError(errorMessage);\n }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}